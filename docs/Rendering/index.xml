<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computación Visual</title><link>https://visualcomputing.github.io/showcase/docs/Rendering/</link><description>Recent content on Computación Visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/docs/Rendering/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/Rendering/1.-Baseline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Rendering/1.-Baseline/</guid><description>Proportionality and symmetry # The key to the illusion realized in the game by forced perception is the proportionality that exists between the field of view and the object. The object grows as much as the field of view. This can be demonstrated by the proportionality theorem for triangles, where the ratio between z&amp;rsquo;/z is equivalent to the ratio between x&amp;rsquo;/x, since they have the same θ the angle of the field of view:</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Rendering/2.-Pixel-Density/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Rendering/2.-Pixel-Density/</guid><description>The world and the pixel # Each pixel on the screen represents a quantity of space in the space of the world. The illusion of forced perspective allows to keep the relation that exists between the world and the pixel, that is to say, the amount of world that can be represented in the pixel in the space of the screen, this relation is going to be called density and is used by the function pixelRatio in the code previously seen.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Rendering/3.-Aplications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Rendering/3.-Aplications/</guid><description>Concept 1 # In the present example an intuitive demonstration of forced perception is made. Two spheres are used which, in perspective, look the same size. However, one of them can be resized in such a way that it changes size in the world, but the camera perceives them as the same size. This happens because of the distance in relation to the camera.
Instructions
Select any of the spheres with a number (0 to 2) Press w or s to zoom in or zoom out on the sphere On the left screen you will see that the spheres do not change size.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Rendering/4.-Conslusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Rendering/4.-Conslusions/</guid><description>Conclusions # The Superliminal game is made possible by elements of rendering that occur in computer graphics. It is through the process of the rendering pipeline that it is possible to achieve the effect of forced perception on the players. Even though an object changes in the world, because of its location and size in the world, this change is neither perceivable in the camera nor projectable on the screen.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Rendering/pruebas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Rendering/pruebas/</guid><description> prueba 8 #</description></item></channel></rss>