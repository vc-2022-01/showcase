[{"id":0,"href":"/showcase/docs/Members/","title":"Members","section":"Docs","content":"Miembros #  En esta sección se presentarán los integrantes para la presentación de los trabajos de Computación Visual. Conformados por:\n Andrés Felipe Betancurth Becerra Juan Manuel Correa Lombana Gabriela María García Romero  "},{"id":1,"href":"/showcase/docs/Members/Andr%C3%A9s-Felipe-Betancurth-Becerra/","title":"Andrés Felipe Betancurth Becerra","section":"Members","content":"Andrés Felipe Betancurth Becerra #  tecnicamente voy por la mitad de la carrera no tengo experiencia y no he trabajado\n"},{"id":2,"href":"/showcase/docs/Members/Gabriela-Mar%C3%ADa-Garc%C3%ADa-Romero/","title":"Gabriela María García Romero","section":"Members","content":"Gabriela María García Romero #  Estudiante de octavo semestre de Ingeniería de Sistemas y Computación en la Universidad Nacional de Colombia. Con interés en temas de modelización e inteligencia artificial. Actualmente se desempeña como representante estudiantil ante el Comité Asesor de la carrea.\nHace parte de los siguientes grupos:\n Semillero Laboratorio de Investigación en Sistemas Inteligentes (LISI) WIE (Women in Engineering)  "},{"id":3,"href":"/showcase/docs/Members/Juan-Manuel-Correa-Lombana/","title":"Juan Manuel Correa Lombana","section":"Members","content":"Juan Manuel Correa Lombana #  Estudiante de octavo semestre de Ingeniería de Sistemas y Computación en la Universidad Nacional de Colombia. , con 1 año de experiencia en manejo de datos y ciencia de datos. Entre sus proyectos realizados se encuentra:\n 6 meses en un proyecto de grafos y optimización de rutas de transporte usando inteligencia artificial 8 meses como analista de datos y ciencia de datos Actualmente llevo 2 meses en ingeniería de datos en el área de arquitectura de bases de datos  "},{"id":4,"href":"/showcase/docs/Perlin-Noise/","title":"Perlin Noise","section":"Docs","content":"Ruido de Perlin #  El ruido de perlin es una función utilizada en la computación gráfica para crear texturas primitivas. Este fue desarrollado por Ken Perlin en 1983, cuando publicó un artículo llamado An Image Synthesizer.\n¿Qué es ruido? #  El ruido es una función pseudo-aleatoria a partir de la cual se pueden generar texturas. Esta se puede representar como una rejilla como la mostrada a continuación:\nEn donde cada vertice tiene asociado un vector\n un vector es un segmento de recta con magnitud y dirección           \"  Este es un vector gradiente pseudo aleatorio.\nAsí, el valor del ruido Perlin en el punto se calcula como un producto punto entre el punto entre los vectores de gradiente en los vértices de la grilla y los vectores desde el punto dado a estos vértices.\nPara finalizar, de interpola el resultado con una función. Generalmente se utiliza este polinomio cúbico:\n3x^2 -2x^3  Características #  Entre sus características están:\n Pseudo-aleatoria Invariante estadísticamente bajo la rotación y translación Tiene un filtro pasa bandas en su frecuencia  Esto permite crear superficies a diferentes escalas, y sin perder el control del efecto al rotar y trasladar.\nNaturalidad #  El objetivo de Perlin con el diseño del algoritmo era la generación de gráficos que fueran más naturales, es decir, que emulen movimientos y texturas de la naruraleza, obteniendo texturas \u0026ldquo;realistas\u0026rdquo;. Esto lo hace al crear secuencias naturalmente ordenadas y suaves de números pseudoaleatorios.\nEs por esta razón que el ruido de Perlin se ha utilizado para crear representaciones convincentes de nubes, fuego, agua, estrellas, tierra, entre otros.\nReferencias #  Michot-Roberto, S., Garcia-Hernández, A., Dopazo-Hilario, S., \u0026amp; Dawson, A. (2021). The spherical primitive and perlin noise method to recreate realistic aggregate shapes. Granular Matter, 23(2), 1-11.\nPerlin, K. (1985). An image synthesizer. ACM Siggraph Computer Graphics, 19(3), 287-296.\nTatarinov, A. (2008). Perlin noise in real-time computer graphics. In GraphiCon (pp. 177-183).\nEn.wikipedia.org. 2022. Perlin noise - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Perlin_noise [Accessed 5 April 2022].\n"},{"id":5,"href":"/showcase/docs/Perlin-Noise/Particule/","title":"Particule","section":"Perlin Noise","content":"Movimiento de partículas a través de un campo de perlin noise #  En el siguiente frame se puede ver el movimiento con rastro de partículas a través de un campo de perlin noise\n          \"           \"           \"  si jugamos con la rejilla y la dirección de los vectores, se pueden generar texturas o efectos visuales más complejos\nSnow #           \"  Grass #           \"  Según lo explica Andre Tatarinov en su paper titulado Perlin noise in Real-time Computer Graphics, esto también se puede usar para generar efectos dinámicos volumétricos como fuego, una explosión o humo, esto solo cambiando la dirección y el comportamiento de los vectores asociados a la rejilla.\n"},{"id":6,"href":"/showcase/docs/Perlin-Noise/Terrain/","title":"Terrain","section":"Perlin Noise","content":"Terreno procedural #  {{\u0026lt; let terrain = []; function setup() {  createCanvas(500, 500, WEBGL);  cols = 0;rows = 0;  elevacion = 100;  scl = 25;  vel = 0.05;  cambio = scl;  crecimiento = 0.07;  w = 800;  h = 800;  cols = w/scl;  rows = h/scl;  avance = 0;  }   function stripOfTerrain(){  yoff = avance;  xoff = 0;  for(x = 0; x \u0026lt; (cols);x++){  terrain[x] = [];  }  for(y = 0; y \u0026lt; (rows); y++){  xoff = 0;  for(x = 0; x \u0026lt; (cols);x++){  terrain[x][y] = map(noise(xoff,yoff),0,1,-elevacion,elevacion);  xoff += crecimiento;  }  yoff += crecimiento;  } }  function draw() {  stripOfTerrain();  cols = w/scl;  rows = h/scl;  avance -= vel;  background(\u0026#39;blue\u0026#39;);  stroke(255);  rotateX(PI/3);  translate(-375,-525);  for(y = 0; y \u0026lt; rows; y++){  beginShape(TRIANGLE_STRIP);  for(x = 0; x \u0026lt; cols;x++){  fill(10,200,200-terrain[x][y]*10)  vertex(x*scl,y*scl,terrain[x][y]);  fill(10,255,100-terrain[x][y+1]*10)  vertex(x*scl,(y+1)*scl,terrain[x][y+1]);  }  endShape();  } } \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\n         \"  "}]