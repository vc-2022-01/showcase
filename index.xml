<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Computación Visual</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Introduction on Computación Visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/Members/Andr%C3%A9s-Felipe-Betancurth-Becerra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Members/Andr%C3%A9s-Felipe-Betancurth-Becerra/</guid><description>Andrés Felipe Betancurth Becerra # estudiante de decima matricula de Ingeniería de Sistemas y Computación en la Universidad Nacional de Colombia con lo que es practicamente solo la mitad de avance de mi carrera, me interesa el campo de la inteligencia artificial orientado al maching lerning, las curiosidades y las series.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Members/Gabriela-Mar%C3%ADa-Garc%C3%ADa-Romero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Members/Gabriela-Mar%C3%ADa-Garc%C3%ADa-Romero/</guid><description>Gabriela María García Romero # Estudiante de octavo semestre de Ingeniería de Sistemas y Computación en la Universidad Nacional de Colombia. Con interés en temas de modelización e inteligencia artificial. Actualmente se desempeña como representante estudiantil ante el Comité Asesor de la carrea.
Hace parte de los siguientes grupos:
Semillero Laboratorio de Investigación en Sistemas Inteligentes (LISI) WIE (Women in Engineering)</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Members/Juan-Manuel-Correa-Lombana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Members/Juan-Manuel-Correa-Lombana/</guid><description>Juan Manuel Correa Lombana # Estudiante de octavo semestre de Ingeniería de Sistemas y Computación en la Universidad Nacional de Colombia. , con 1 año de experiencia en manejo de datos y ciencia de datos. Entre sus proyectos realizados se encuentra:
6 meses en un proyecto de grafos y optimización de rutas de transporte usando inteligencia artificial 8 meses como analista de datos y ciencia de datos Actualmente llevo 2 meses en ingeniería de datos en el área de arquitectura de bases de datos</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Perlin-Noise/Particule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Perlin-Noise/Particule/</guid><description>Movimiento de partículas a través de un campo de perlin noise # En el siguiente frame se puede ver el movimiento con rastro de partículas a través de un campo de perlin noise
" " " si jugamos con la rejilla y la dirección de los vectores, se pueden generar texturas o efectos visuales más complejos</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Perlin-Noise/Terrain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Perlin-Noise/Terrain/</guid><description>Terreno procedural # {{&amp;lt; let terrain = []; function setup() { createCanvas(500, 500, WEBGL); cols = 0;rows = 0; elevacion = 100; scl = 25; vel = 0.05; cambio = scl; crecimiento = 0.07; w = 800; h = 800; cols = w/scl; rows = h/scl; avance = 0; } function stripOfTerrain(){ yoff = avance; xoff = 0; for(x = 0; x &amp;lt; (cols);x++){ terrain[x] = []; } for(y = 0; y &amp;lt; (rows); y++){ xoff = 0; for(x = 0; x &amp;lt; (cols);x++){ terrain[x][y] = map(noise(xoff,yoff),0,1,-elevacion,elevacion); xoff += crecimiento; } yoff += crecimiento; } } function draw() { stripOfTerrain(); cols = w/scl; rows = h/scl; avance -= vel; background(&amp;#39;blue&amp;#39;); stroke(255); rotateX(PI/3); translate(-375,-525); for(y = 0; y &amp;lt; rows; y++){ beginShape(TRIANGLE_STRIP); for(x = 0; x &amp;lt; cols;x++){ fill(10,200,200-terrain[x][y]*10) vertex(x*scl,y*scl,terrain[x][y]); fill(10,255,100-terrain[x][y+1]*10) vertex(x*scl,(y+1)*scl,terrain[x][y+1]); } endShape(); } } &amp;gt;}} All parameters are optional but sketch.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Perspective-Superliminal/funcion-PixelRatio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Perspective-Superliminal/funcion-PixelRatio/</guid><description>El mundo y el pixel # " desnidad del mundo # " alejandonos # "</description></item></channel></rss>